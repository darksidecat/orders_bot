"""init

Revision ID: c82ae5449675
Revises: 
Create Date: 2022-06-20 22:56:10.784819

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy import orm
from sqlalchemy.dialects import postgresql

from app.config import load_config
from app.domain.access_levels.models.access_level import AccessLevel, LevelName
from app.domain.user.models.user import TelegramUser

# revision identifiers, used by Alembic.
revision = "c82ae5449675"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "access_level",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "name",
            sa.Enum(
                "BLOCKED", "USER", "ADMINISTRATOR", "CONFIRMATION", name="levelname"
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_access_level")),
    )
    op.create_table(
        "goods",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("name", sa.TEXT(), nullable=False),
        sa.Column("type", sa.Enum("GOODS", "FOLDER", name="goodstype"), nullable=False),
        sa.Column("parent_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column(
            "parent_type", sa.Enum("GOODS", "FOLDER", name="goodstype"), nullable=True
        ),
        sa.Column("sku", sa.TEXT(), nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), nullable=False),
        sa.CheckConstraint(
            "(type in ('FOLDER') AND sku IS NULL) or type in ('GOODS')",
            name=op.f("ck_goods_folder_sku_null"),
        ),
        sa.CheckConstraint(
            "(type in ('GOODS') AND sku IS NOT NULL) or type in ('FOLDER')",
            name=op.f("ck_goods_goods_sku_not_null"),
        ),
        sa.CheckConstraint(
            "parent_type in ('FOLDER')", name=op.f("ck_goods_parent_type_is_folder")
        ),
        sa.ForeignKeyConstraint(
            ["parent_id", "parent_type"],
            ["goods.id", "goods.type"],
            name=op.f("fk_goods_parent_id_goods"),
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_goods")),
        sa.UniqueConstraint("id", "type", name=op.f("uq_goods_id")),
    )
    op.create_table(
        "market",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("name", sa.TEXT(), nullable=False),
        sa.Column("is_active", sa.BOOLEAN(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_market")),
    )
    op.create_table(
        "user",
        sa.Column("id", sa.BIGINT(), nullable=False),
        sa.Column("name", sa.TEXT(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user")),
    )
    op.create_table(
        "order",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("creator_id", sa.INTEGER(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("confirmed_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("recipient_market_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("commentary", sa.TEXT(), nullable=False),
        sa.Column(
            "confirmed",
            sa.Enum("YES", "NO", "NOT_PROCESSED", name="confirmedstatus"),
            server_default="NOT_PROCESSED",
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["creator_id"],
            ["user.id"],
            name=op.f("fk_order_creator_id_user"),
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["recipient_market_id"],
            ["market.id"],
            name=op.f("fk_order_recipient_market_id_market"),
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_order")),
    )
    op.create_table(
        "user_access_levels",
        sa.Column("user_id", sa.BIGINT(), nullable=False),
        sa.Column("access_level_id", sa.INTEGER(), nullable=False),
        sa.ForeignKeyConstraint(
            ["access_level_id"],
            ["access_level.id"],
            name=op.f("fk_user_access_levels_access_level_id_access_level"),
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name=op.f("fk_user_access_levels_user_id_user"),
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "user_id", "access_level_id", name=op.f("pk_user_access_levels")
        ),
    )
    op.create_table(
        "order_line",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("order_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("goods_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "goods_type", sa.Enum("GOODS", "FOLDER", name="goodstype"), nullable=False
        ),
        sa.Column("quantity", sa.BIGINT(), nullable=False),
        sa.CheckConstraint(
            "goods_type in ('GOODS')", name=op.f("ck_order_line_goods_type_check")
        ),
        sa.ForeignKeyConstraint(
            ["goods_id", "goods_type"],
            ["goods.id", "goods.type"],
            name=op.f("fk_order_line_goods_id_goods"),
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["order_id"],
            ["order.id"],
            name=op.f("fk_order_line_order_id_order"),
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_order_line")),
    )
    op.create_table(
        "order_message",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("order_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("message_id", sa.INTEGER(), nullable=False),
        sa.Column("chat_id", sa.INTEGER(), nullable=False),
        sa.ForeignKeyConstraint(
            ["order_id"],
            ["order.id"],
            name=op.f("fk_order_message_order_id_order"),
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_order_message")),
    )

    bind = op.get_bind()
    session = orm.Session(bind=bind)

    blocked = AccessLevel(id=-1, name=LevelName.BLOCKED)
    admin = AccessLevel(id=1, name=LevelName.ADMINISTRATOR)
    user = AccessLevel(id=2, name=LevelName.USER)
    confirmation = AccessLevel(id=3, name=LevelName.CONFIRMATION)

    config = load_config()
    admins = [
        TelegramUser(
            id=admin_id, name="Admin", access_levels=[admin, user, confirmation]
        )
        for admin_id in config.tg_bot.admin_ids
    ]

    session.add_all(
        (
            blocked,
            admin,
            user,
            confirmation,
            *admins,
        )
    )

    session.commit()

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("order_message")
    op.drop_table("order_line")
    op.drop_table("user_access_levels")
    op.drop_table("order")
    op.drop_table("user")
    op.drop_table("market")
    op.drop_table("goods")
    op.drop_table("access_level")

    sa.Enum("BLOCKED", "USER", "ADMINISTRATOR", "CONFIRMATION", name="levelname").drop(
        op.get_bind()
    )
    sa.Enum("GOODS", "FOLDER", name="goodstype").drop(op.get_bind())
    sa.Enum("YES", "NO", "NOT_PROCESSED", name="confirmedstatus").drop(op.get_bind())
    # ### end Alembic commands ###
